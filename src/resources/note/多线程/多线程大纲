# 线程池整体类图

<img src=".\image\watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDMzNzgzMw==,size_16,color_FFFFFF,t_70"  alt="线程池类图" style="zoom:100%;"  algin="left"/>

> （**实线是继承 虚线是实现**）
>
> 1.Executor：线程池顶级接口
> 2.ExecutorService：线程池次级接口，对Executor做了一些扩展，增加了一些功能
> 3.ScheduledExecutorService：对ExecutorService做了一些扩展，增加了一些定时任务相关的功能
> 4.AbstractExecutorService：抽象类，运用模板方法设计模式实现了一部分方法
> 5.ThreadPoolExecutor：普通线程池类，包含最基本的一些线程池操作相关的方法实现
> 6.ScheduledThreadPoolExecutor：定时任务线程池类，用于实现定时任务相关的功能
> 7.ForkJoinPool：新型线程池类，Java7中新增的线程池类，基于工作窃取理论（WorkStealing）实现，运用于大任务拆分为小任务，任务很多的场景
> 8.Executors：线程池工具类，定义了一些快速实现线程池的方法。

## Executor

```java
package java.util.concurrent;

public interface Executor {
    //执行 Runnable
    void execute(Runnable command);
}
```



## AbstractExecutorService

```java

                                         
        /**
     * 执行全部任务
     * @param tasks
     * @param <T>
     * @return
     * @throws InterruptedException
     */
    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)  
    
       /**
     * 执行任务计划，有任何一个完成了，则返回，有超时时间限制
     * @param tasks
     * @param timeout
     * @param unit
     * @param <T>
     * @return
     * @throws InterruptedException
     * @throws ExecutionException
     * @throws TimeoutException
     */
    public <T> T invokeAny(Collection<? extends Callable<T>> tasks,
                           long timeout, TimeUnit unit)
                           
        
      /**
     * invokeAny的主要执行逻辑，
      1、创建ExecutorCompletionService ecs, 将this当前执行器传入为executor属性
      2、将每一个任务封装成QueueingFuture（继承FutureTask）,ecs 先提交一个任务，然后再提交其他任务
      3、FutureTask在完成时会调用finishCompletion()，然后会执行QueueingFuture.done（）方法
      4、将当前任务执行结果保存在属性队列ecs.completionQueue中
      5、在外部调用poll,如果completionQueue返回不为空，则表示有任务已经执行完成
     * @param tasks 任务集合
     * @param timed 超时时间
     * @param nanos 纳秒  1000 纳秒= 1微秒 ，1000微秒=1毫秒
     */
    private <T> T doInvokeAny(Collection<? extends Callable<T>> tasks,
                              boolean timed, long nanos)
```



